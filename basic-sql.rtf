{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fswiss\fcharset0 Arial-BoldMT;\f2\fnil\fcharset0 Verdana;
\f3\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red16\green60\blue192;\red255\green255\blue255;\red26\green26\blue26;
\red69\green85\blue94;}
{\*\expandedcolortbl;;\cssrgb\c6667\c33333\c80000;\cssrgb\c100000\c100000\c100000;\cssrgb\c13333\c13333\c13333;
\cssrgb\c34118\c40784\c44314;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/chhayac/SQL-hackerrank-problems/blob/master/basic-select.md"}}{\fldrslt 
\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 https://github.com/chhayac/SQL-hackerrank-problems/blob/master/basic-select.md}}
\f0\fs28 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 Query the\'a0
\f1\b ALL
\f0\b0 \'a0field for all American cities in the\'a0
\f1\b CITY
\f0\b0 \'a0table with populations larger than\'a0
\f2\fs20 100000
\f0\fs28 . The\'a0CountryCode\'a0for America is\'a0
\f3 USA
\f0 .\cb1 \
\cb3 The\'a0
\f1\b CITY
\f0\b0 \'a0table is described as follows:\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs20 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 SELECT *\cb1 \
\cb3 FROM CITY\cb1 \
\cb3 WHERE COUNTRYCODE = 'USA' AND POPULATION > 100000\cb1 \
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb3 Query the\'a0
\f1\b NAME
\f0\b0 \'a0field for all American cities in the\'a0
\f1\b CITY
\f0\b0 \'a0table with populations larger than\'a0
\f3 120000
\f0 . The\'a0CountryCode\'a0for America is\'a0
\f3 USA
\f0 .\cb1 \
\cb3 The\'a0
\f1\b CITY
\f0\b0 \'a0table is described as follows:\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs20 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 SELECT NAME\cb1 \
\cb3 FROM CITY\cb1 \
\cb3 WHERE COUNTRYCODE = 'USA' AND POPULATION > 120000\cb1 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb3 Query all columns (attributes) for every row in the\'a0
\f1\b CITY
\f0\b0 \'a0table.\cb1 \
\cb3 The\'a0
\f1\b CITY
\f0\b0 \'a0table is described as follows:\cb1 \
\cb3 SELECT *\cb1 \uc0\u8232 \cb3 FROM CITY\cb1 \
\
\cb3 Query all columns for a city in\'a0
\f1\b CITY
\f0\b0 \'a0with the\'a0ID\'a0
\f3 1661
\f0 .\cb1 \
\cb3 The\'a0
\f1\b CITY
\f0\b0 \'a0table is described as follows:\cb1 \
\
\cb3 SELECT *\cb1 \uc0\u8232 \cb3 FROM CITY\cb1 \uc0\u8232 \cb3 WHERE ID = 1661\cb1 \
\
\cb3 Query all attributes of every Japanese city in the\'a0
\f1\b CITY
\f0\b0 \'a0table. The\'a0
\f1\b COUNTRYCODE
\f0\b0 \'a0for Japan is\'a0
\f3 JPN
\f0 .\cb1 \
\cb3 The\'a0
\f1\b CITY
\f0\b0 \'a0table is described as follows:\cb1 \
\cb3 SELECT *\cb1 \uc0\u8232 \cb3 FROM CITY\cb1 \uc0\u8232 \cb3 WHERE COUNTRYCODE = 'JPN'\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 Query the names of all the Japanese cities in the\'a0
\f1\b \cf4 \strokec4 CITY
\f0\b0 \cf5 \strokec5 \'a0table. The\'a0
\f1\b \cf4 \strokec4 COUNTRYCODE
\f0\b0 \cf5 \strokec5 \'a0for Japan is\'a0
\f3 \cf4 \strokec4 JPN
\f0 \cf5 \strokec5 .\cb1 \uc0\u8232 \cb3 The\'a0
\f1\b \cf4 \strokec4 CITY
\f0\b0 \cf5 \strokec5 \'a0table is described as follows:\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 SELECT NAME\cb1 \uc0\u8232 \cb3 FROM CITY\cb1 \uc0\u8232 \cb3 WHERE COUNTRYCODE = 'JPN'\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 Query a list of\'a0
\f1\b \cf4 \strokec4 CITY
\f0\b0 \cf5 \strokec5 \'a0and\'a0
\f1\b \cf4 \strokec4 STATE
\f0\b0 \cf5 \strokec5 \'a0from the\'a0
\f1\b \cf4 \strokec4 STATION
\f0\b0 \cf5 \strokec5 \'a0table.\cb1 \uc0\u8232 \cb3 The\'a0
\f1\b \cf4 \strokec4 STATION
\f0\b0 \cf5 \strokec5 \'a0table is described as follows:\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 SELECT CITY, STATE\cb1 \uc0\u8232 \cb3 FROM STATION\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 Query a list of\'a0
\f1\b \cf4 \strokec4 CITY
\f0\b0 \cf5 \strokec5 \'a0names from\'a0
\f1\b \cf4 \strokec4 STATION
\f0\b0 \cf5 \strokec5 \'a0for cities that have an even\'a0
\f1\b \cf4 \strokec4 ID
\f0\b0 \cf5 \strokec5 \'a0number. Print the results in any order, but exclude duplicates from the answer.\cb1 \uc0\u8232 \cb3 The\'a0
\f1\b \cf4 \strokec4 STATION
\f0\b0 \cf5 \strokec5 \'a0table is described as follows:\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 SELECT DISTINCT CITY\cb1 \uc0\u8232 \cb3 FROM STATION\cb1 \uc0\u8232 \cb3 WHERE ID%2 = 0\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 Find the difference between the total number of\'a0
\f1\b \cf4 \strokec4 CITY
\f0\b0 \cf5 \strokec5 \'a0entries in the table and the number of distinct\'a0
\f1\b \cf4 \strokec4 CITY
\f0\b0 \cf5 \strokec5 \'a0entries in the table.\cb1 \uc0\u8232 \cb3 The\'a0
\f1\b \cf4 \strokec4 STATION
\f0\b0 \cf5 \strokec5 \'a0table is described as follows:\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 SELECT COUNT(CITY) \'a0- COUNT(DISTINCT CITY)\cb1 \uc0\u8232 \cb3 FROM STATION\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 Query the two cities in\'a0
\f1\b \cf4 \strokec4 STATION
\f0\b0 \cf5 \strokec5 \'a0with the shortest and longest\'a0CITY\'a0names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 Declare @Small int\cb1 \uc0\u8232 \cb3 Declare @Large int\cb1 \uc0\u8232 \cb3 select @Small = Min(Len(City)) from Station\cb1 \uc0\u8232 \cb3 select @Large = Max(Len(City)) from Station\cb1 \uc0\u8232 \cb3 select Top 1 City as SmallestCityName,Len(City) as Minimumlength from Station where Len(City) = @Small Order by City Asc\cb1 \uc0\u8232 \cb3 select Top 1 City as LargestCityName,Len(City) as MaximumLength from Station where Len(City) = @Large Order by City Asc\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 Query the list of\'a0CITY\'a0names starting with vowels (i.e.,\'a0
\f3 \cf4 \strokec4 a
\f0 \cf5 \strokec5 ,\'a0
\f3 \cf4 \strokec4 e
\f0 \cf5 \strokec5 ,\'a0
\f3 \cf4 \strokec4 i
\f0 \cf5 \strokec5 ,\'a0
\f3 \cf4 \strokec4 o
\f0 \cf5 \strokec5 , or\'a0
\f3 \cf4 \strokec4 u
\f0 \cf5 \strokec5 ) from\'a0
\f1\b \cf4 \strokec4 STATION
\f0\b0 \cf5 \strokec5 . Your result\'a0cannot\'a0contain duplicates.\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 SELECT DISTINCT(CITY) FROM STATION WHERE CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%'\cb1 \uc0\u8232 \cb3 OR CITY LIKE 'U%' ORDER BY CITY ASC;\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 Query the list of\'a0CITY\'a0names ending with vowels (a, e, i, o, u) from\'a0
\f1\b \cf4 \strokec4 STATION
\f0\b0 \cf5 \strokec5 . Your result\'a0cannot\'a0contain duplicates.\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 SELECT DISTINCT(CITY) FROM STATION WHERE CITY LIKE '%A' OR CITY LIKE '%E' OR CITY LIKE '%I' OR CITY LIKE '%O'\cb1 \uc0\u8232 \cb3 OR CITY LIKE '%U' ORDER BY CITY ASC;\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 Query the list of\'a0CITY\'a0names from\'a0
\f1\b \cf4 \strokec4 STATION
\f0\b0 \cf5 \strokec5 \'a0which have vowels (i.e.,\'a0a,\'a0e,\'a0i,\'a0o, and\'a0u) as both their first\'a0and\'a0last characters. Your result cannot contain duplicates.\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 SELECT DISTINCT CITY\cb1 \uc0\u8232 \cb3 FROM STATION\cb1 \uc0\u8232 \cb3 WHERE (CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' OR CITY LIKE 'U%') AND (CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' OR CITY LIKE '%u') order by CITY;\'a0 \'a0\'a0\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 Query the list of\'a0CITY\'a0names from\'a0
\f1\b \cf4 \strokec4 STATION
\f0\b0 \cf5 \strokec5 \'a0that\'a0do not start\'a0with vowels. Your result cannot contain duplicates.\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0

\f2\fs20 \cf4 \cb3 SELECT DISTINCT CITY FROM STATION\cb1 \
\cb3 WHERE upper(SUBSTR(CITY,1,1)) NOT IN ('A','E','I','O','U') AND lower(SUBSTR(CITY,1,1)) NOT IN\cb1 \
\cb3 ('a','e','i','o','u');
\f0\fs28 \cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 Query the list of\'a0CITY\'a0names from\'a0
\f1\b \cf4 \strokec4 STATION
\f0\b0 \cf5 \strokec5 \'a0that\'a0do not end\'a0with vowels. Your result cannot contain duplicates.\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0

\f2\fs20 \cf4 \cb3 SELECT DISTINCT CITY\cb1 \
\cb3 FROM STATION\cb1 \
\cb3 WHERE UPPER(SUBSTR(CITY, LENGTH(CITY), 1)) NOT IN ('A','E','I','O','U') AND LOWER(SUBSTR(CITY, LENGTH(CITY),1)) NOT IN ('a','e','i','o','u');\'a0\'a0
\f0\fs28 \cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 Query the list of\'a0CITY\'a0names from\'a0
\f1\b \cf4 \strokec4 STATION
\f0\b0 \cf5 \strokec5 \'a0that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 SELECT DISTINCT CITY FROM STATION WHERE LOWER(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u') OR LOWER(SUBSTR(CITY, LENGTH(CITY),1)) NOT IN ('a','e','i','o','u');\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 Query the list of\'a0CITY\'a0names from\'a0
\f1\b \cf4 \strokec4 STATION
\f0\b0 \cf5 \strokec5 \'a0that\'a0do not start\'a0with vowels and\'a0do not end\'a0with vowels. Your result cannot contain duplicates.\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 SELECT DISTINCT CITY FROM STATION WHERE LOWER(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u') AND LOWER(SUBSTR(CITY, LENGTH(CITY),1)) NOT IN ('a','e','i','o','u');\'a0\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 Query the\'a0Name\'a0of any student in\'a0
\f1\b \cf4 \strokec4 STUDENTS
\f0\b0 \cf5 \strokec5 \'a0who scored higher than\'a0\'a0Marks. Order your output by the\'a0last three characters\'a0of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending\'a0ID.\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 SELECT NAME\cb1 \uc0\u8232 \cb3 FROM STUDENTS\cb1 \uc0\u8232 \cb3 WHERE MARKS > 75\cb1 \uc0\u8232 \cb3 ORDER BY SUBSTR(NAME, LENGTH(NAME)-2, 3), ID;\cb1 \
\
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 Write a query that prints a list of employee names (i.e.: the\'a0name\'a0attribute) from the\'a0
\f1\b \cf4 \strokec4 Employee
\f0\b0 \cf5 \strokec5 \'a0table in alphabetical order.\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 SELECT NAME\cb1 \uc0\u8232 \cb3 FROM EMPLOYEE\cb1 \uc0\u8232 \cb3 ORDER BY NAME;\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 Write a query that prints a list of employee names (i.e.: the\'a0name\'a0attribute) for employees in\'a0
\f1\b \cf4 \strokec4 Employee
\f0\b0 \cf5 \strokec5 \'a0having a salary greater than\'a0\'a0$2000 per month who have been employees for less than\'a010\'a0months. Sort your result by ascending\'a0employee_id.\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 SELECT NAME\cb1 \uc0\u8232 \cb3 FROM EMPLOYEE\cb1 \uc0\u8232 \cb3 WHERE SALARY > 2000 AND MONTHS < 10\cb1 \uc0\u8232 \cb3 ORDER BY EMPLOYEE_ID ASC;\cb1 \
}